h2. Abstract

Schedule is a Ruby class which encapsulates a repeating schedule. Objects are initialized with a "Cron expression":http://en.wikipedia.org/wiki/Cron#crontab_syntax which powerfully specifies the mintes, hours, days, and months on which the schedule should repeat. Once initialized the object can be used to explore the schedule forwards and backwards in time.


h2. Creating

<pre>
	<code>
		>> schedule = Schedule.new '0 8-17 1 * FRI'
	</code>
</pre>

creates a new Schedule object which will match each hour between 8am and 5pm every Friday or 1st of the month.

<pre>
	<code>
		>> schedule.before_now
		=> Fri Nov 21 17:00:00 UTC 2008
		
		>> schedule.after_now
		=> Fri Nov 28 08:00:00 UTC 2008
		
		>> schedule.before 7.days.ago
		=> Fri Nov 14 17:00:00 UTC 2008			
	</code>
</pre>

Each Schedule object maintains an internal reference time. This is set to the creation time time by default but can be overridden at initialization by passing it as the second parameter or with the reference= method.

<pre>
	<code>
		>> schedule = Schedule.new '0 8-17 1 * FRI', 2.months.ago
		
		>> schedule.next
		=> Fri Sep 26 08:00:00 UTC 2008
		
		>> schedule.previous
		=> Fri Sep 19 17:00:00 UTC 2008
		
		>> schedule.reference = 5.months.ago

		>> schedule.previous
		=> Fri Jun 20 17:00:00 UTC 2008
		
		>> schedule.timetable_upto 2.months.ago
		=> [Fri Jun 27 08:00:00 UTC 2008, Fri Jun 27 09:00:00 UTC 2008, Fri Jun 27 10:00:00 UTC 2008 ... ]
	</code>
</pre>


h2. Loops and Iterations

The @next!@ method returns the first match following the reference and sets the reference to the result. This means the @next!@ method can be called iteratively to move through the schedule timetable.

<pre>
	<code>
		>> schedule.next!
		=> Wed Oct 01 09:00:00 UTC 2008
		
		>> schedule.next!
		=> Wed Oct 01 10:00:00 UTC 2008
		
		>> schedule.next!
		=> Wed Oct 01 11:00:00 UTC 2008
		
		>> while next_time = schedule.next!
		>>   break if should_halt?
		>>   do_something_with next_time
		>> end
	</code>
</pre>

You can also use several built-in loop constructs...

<pre>
	<code>
		>> schedule = Schedule.new '0 0 * * *'

		>> schedule.upto 2.days.from_now do |time|
		>>   puts time
		>> end
		
		>> schedule.each do |time|
		>>   output << "Occurs on #{time}"
		>>   break if some_event
		>> end
		
		>> schedule.while do |time|
		>>   puts time.days
		>>   should_continue?
		>> end
	</code>
</pre>


h2. Comparison

You can check if a schedule matches the current time with the @matches?@ or @===@ methods.

<pre>
	<code>
		>> schedule = Schedule.new '* * * 12 *'
		
		>> schedule.matches?
		=> false
		
		>> schedule === Time.now
		=> false
		
		>> schedule === Time.gm(2008, 12)
		=> true
		
		>> schedule.matches? Time.gm(2008, 12, 5, 8, 15)
		=> true
	</code>
</pre>		
		


h3. Author

"Henry Garner":http://www.quantedit.co.uk

h3. Licence

"MIT":http://www.opensource.org/licenses/mit-license.php
